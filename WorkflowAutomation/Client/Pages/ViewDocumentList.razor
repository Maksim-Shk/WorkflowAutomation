@page "/ViewDocumentList"

@using WorkflowAutomation.Application.Documents.Queries.GetAllowedDocumentList;
@using WorkflowAutomation.Application.Documents.Queries.GetDocumentList

@using System.Drawing
@using System.ComponentModel.DataAnnotations;
@using Microsoft.Extensions.Logging;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Blazorise.DataGrid


@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject HttpClient httpClient


<link href="/css/ViewDocumentList.css" rel="stylesheet" />

<PageTitle>Просмотр документов</PageTitle>

<EditForm Model="@allowedDocumentListVm" Context="EditFormContext">
       
    <DataGrid TItem="GetAllowedDocumentListLookupDto"
              Data="@allowedDocumentListVm.AllowedDocuments"
              Responsive
              Filterable
              Sortable
              SortMode="DataGridSortMode.Multiple"
              ShowPager
              ShowPageSizes
              PagerPosition="DataGridPagerPosition.Bottom"
              PagerOptions="new(){ ButtonSize=Blazorise.Size.Medium}">
    
              <DataGridColumns>
        <DataGridColumn Field="@nameof(GetAllowedDocumentListLookupDto.Title)" Caption="Тема" >
            <DisplayTemplate>
                @{
                        var title = (context as GetAllowedDocumentListLookupDto)?.Title;
                        var DocId = (context as GetAllowedDocumentListLookupDto)?.Id;
                        if (title != null){
                                <a href="ShowDocument/@DocId" >@title</a>
                                       }}
            </DisplayTemplate>

        </DataGridColumn>
        <DataGridColumn Field="@nameof(GetAllowedDocumentListLookupDto.DocumentType)" Caption="Тип документа" Filterable="false"></DataGridColumn>
        <DataGridColumn Field="@nameof(GetAllowedDocumentListLookupDto.SenderInfo)" Caption="Отправитель"  Sortable="false">
            <DisplayTemplate>
             @{
                    var userinfo = (context as GetAllowedDocumentListLookupDto)?.SenderInfo;
                    var SenderId = (context as GetAllowedDocumentListLookupDto)?.SenderId;
                    if (userinfo!=null){
                                <a href="UserInformation/@SenderId" >@userinfo</a>
                    }
             }
            </DisplayTemplate>
            </DataGridColumn>
        <DataGridColumn Field="@nameof(GetAllowedDocumentListLookupDto.RecieverInfo)" Caption="Получатель" Sortable="false" >
            <DisplayTemplate>
                @{
                    var userinfo = (context as GetAllowedDocumentListLookupDto)?.RecieverInfo;
                    var RecieverId = (context as GetAllowedDocumentListLookupDto)?.RecieverId;

                    if (userinfo != null){
                                <a href="UserInformation/@RecieverId" class="plain_text">@userinfo</a>
                    }
                }
            </DisplayTemplate>
            </DataGridColumn>
        <DataGridColumn Field="@nameof(GetAllowedDocumentListLookupDto.Status)" Caption="Статус" ></DataGridColumn>
        <DataGridColumn Field="@nameof(GetAllowedDocumentListLookupDto.CreateDate)" Caption="Дата создания" Filterable="false"></DataGridColumn>
        <DataGridColumn Field="@nameof(GetAllowedDocumentListLookupDto.RemoveDate)" Caption="Дата удаления (если есть)" Filterable="false"></DataGridColumn>
       </DataGridColumns>

       <PageButtonTemplate>
            <Span TextColor="TextColor.Primary">
                @context.PageNumber
            </Span>
       </PageButtonTemplate>
        <NextPageButtonTemplate><Icon Name="IconName.StepForward" TextColor="TextColor.Primary" /></NextPageButtonTemplate>
        <PreviousPageButtonTemplate><Icon Name="IconName.StepBackward" TextColor="TextColor.Primary" /></PreviousPageButtonTemplate>
        <LastPageButtonTemplate><Icon Name="IconName.Forward" TextColor="TextColor.Primary" /></LastPageButtonTemplate>
        <FirstPageButtonTemplate><Icon Name="IconName.Backward" TextColor="TextColor.Primary" /></FirstPageButtonTemplate>
       
        <ItemsPerPageTemplate></ItemsPerPageTemplate>
        <PageSelectorTemplate>
            <Select TextColor="TextColor.Primary" @bind-SelectedValue="@context.CurrentPage" Size="Blazorise.Size.Medium">
                @for (int i = context.FirstVisiblePage; i <= context.LastVisiblePage; ++i)
                {
                    var pageNumber = i;
                    <SelectItem Value="@pageNumber">@pageNumber</SelectItem>
                }
                </Select>
        </PageSelectorTemplate>
        <PageSizesTemplate>
            <Select TextColor="TextColor.Primary" @bind-SelectedValue="@context.CurrentPageSize" Size="Blazorise.Size.Medium">
                @foreach (var curPageSize in context.PageSizes)
                {
                    <SelectItem Value="@curPageSize">@curPageSize</SelectItem>
                }
            </Select>
        </PageSizesTemplate>
    </DataGrid>
</EditForm>
@code {
    AllowedDocumentListVm allowedDocumentListVm = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            allowedDocumentListVm.AllowedDocuments = new List<GetAllowedDocumentListLookupDto>();
            allowedDocumentListVm = await httpClient.GetFromJsonAsync<AllowedDocumentListVm>("Document/GetAllowedDocuments");
          
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}