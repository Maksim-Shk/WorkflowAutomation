@page "/ViewDocumentList"
@using Microsoft.Extensions.Logging;
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using WorkflowAutomation.Application.Documents.Queries.GetAllowedDocumentList;
@using WorkflowAutomation.Application.Documents.Queries.GetDocumentList

@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject HttpClient httpClient

<h3>Просмотр документов</h3>

<EditForm Model="@allowedDocumentListVm">
    <DataAnnotationsValidator />

    <table class="table table-hover">
        <thead>
            <tr>
                <th>Тема</th>
                <th>Тип документа</th>
                <th>Отправитель</th>
                <th>Получатель</th>
                <th>Дата создания</th>
                <th>Дата удаления (если есть)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var doc in allowedDocumentListVm.AllowedDocuments)
            {
                    <tr>
                    <td> <a href="ShowDocument/@doc.Id">@doc.Title</a></td>
                        <td>@doc.DocumentType</td>
                    <td> <a href="UserInformation/@doc.SenderInfo.UserId">@doc.SenderInfo.UserInfo</a></td>
                    <td> <a href="UserInformation/@doc.RecieverInfo.UserId">@doc.RecieverInfo.UserInfo</a></td>
                        <td>@doc.CreateDate</td>
                    <td>@doc.RemoveDate</td>
                </tr>
            }
        </tbody>
    </table>

</EditForm>
@code {
    AllowedDocumentListVm allowedDocumentListVm = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            allowedDocumentListVm.AllowedDocuments = new List<GetAllowedDocumentListLookupDto>();
            //documentListVm = await httpClient.GetFromJsonAsync<DocumentListVm>("Document/GetAllDocuments");
            allowedDocumentListVm = await httpClient.GetFromJsonAsync<AllowedDocumentListVm>("Document/GetAllowedDocuments");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}
