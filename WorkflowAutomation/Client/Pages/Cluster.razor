@page "/Cluster"

@*@using WorkflowAutomation.Application.Documents.Queries.GetDocumentList*@
@using WorkflowAutomation.Application.ClusterAnalysis.Commands.StartlusterAnalysis;

@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.ComponentModel.DataAnnotations

@inject HttpClient Http
@inject NavigationManager NavigationManager

@*<button type="submit" class="btn btn-primary">Визуализированные данные</button>*@

<PageTitle>Кластерный анализ</PageTitle>

<h3>Просмотр документов</h3>

<EditForm Model="@outputClustersVm">
    <DataAnnotationsValidator />

    <table class="table">
        <thead>
            <tr>
                <th>ID документа</th>
                <th>Тема</th>
                <th>Класс документа</th>
                @foreach (var statusName in StatusesNames)
                {
                    <th>@statusName</th>
                    <th>Нормализированный @statusName</th>
                }
                <th>Тип документа</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var doc in outputClustersVm.DocumentClusters)
            {
                <tr>
                    <td>@doc.DocumentId</td>
                    <td>@doc.DocumentName</td>
                    <td>@(doc.ClusterId+1)</td>
                    @foreach (var item in doc.Statuses)
                    {
                        <td>
                            @if (@item.StatusValue > 60 && @item.StatusValue <= 1536)
                            {
                                <Div>@(Math.Round(item.StatusValue/60,0)) часов @(Math.Round(item.StatusValue%60,0)) минут</Div>
                            }
                            else if (@item.StatusValue > 1536)
                            {
                                <Div>@(Math.Round(item.StatusValue / 1536, 0)) дней @(Math.Round(item.StatusValue % 1536 / 60, 0)) часов @(Math.Round(item.StatusValue % 1536 / 60,0)) минут</Div>
                            }
                            else
                            {
                                <Div>@(Math.Round(item.StatusValue,0)) минут</Div>
                            }
                        </td>
                        <td>@item.StatusNormaliseValue</td>
                    }
                    <td>@doc.DocumentType</td>
                </tr>
            }
        </tbody>
    </table>

</EditForm>
@code {

    //заглушка для кластерного анализа


    StartClusterAnalysisDto startClusterAnalysisDto = new();
    OutputClustersVm outputClustersVm = new();
    //List<Dictionary<int, string>> statuses = new List<Dictionary<int, string>>();
    List<int> statuses = new List<int> { 2, 5 };
    List<string> StatusesNames = new List<String> { "Время до принятия" };
    //DocumentListVm documentListVm = new();
    //public class ClusterClass
    //{
    //    public int Id{ get; set; }
    //    public string Title{ get; set; }
    //    public string DateWork { get; set; }
    //    public string DateCheck { get; set; }
    //    public string DocClass{ get; set; }
    //}

    //public List<ClusterClass> Clusters;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            startClusterAnalysisDto.StatusesIds = statuses;//= statusList;
            var httpResponse = await Http.PostAsJsonAsync<StartClusterAnalysisDto>("/ClusterAnalysis/CalculateClusters", startClusterAnalysisDto);
            outputClustersVm = await httpResponse.Content.ReadFromJsonAsync<OutputClustersVm>();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}
