@page "/CreateNewDoc"

@using WorkflowAutomation.Shared
@using WorkflowAutomation.Application.Documents.Queries.GetSubdivisionList
@using WorkflowAutomation.Application.Documents.Commands.CreateNewDocument
@using WorkflowAutomation.Application.DocType.Queries.GetDocumentTypeListQuery
@using WorkflowAutomation.Application.Users.Queries.GetAllUsers

@using Microsoft.AspNetCore.Http;
@using Microsoft.Extensions.Logging;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.SignalR.Client

@using System.ComponentModel.DataAnnotations;
@using System.Net.Http.Headers
@using System.Linq


@attribute [Authorize]
@inject HttpClient Http
@inject ILogger<CreateNewDoc> Logger
@inject INotificationService NotificationService
@inject JwtTokenProvider jwtTokenProvider
@inject NavigationManager NavigationManager
@implements IAsyncDisposable



<Validations @ref="@ValidationsRef" Mode="ValidationMode.Manual" Model="@createNewDocumentDto" ValidateOnLoad="true">
    <h6>Тема</h6>
    <Validation>
        <TextEdit id="Title" class="form-control" @bind-Text="@createNewDocumentDto.Title">
            <Feedback>
                <ValidationError />
            </Feedback>
        </TextEdit>
    </Validation>

    <h6>Получатель</h6>

    <Validation>
        <Select @bind-SelectedValue="@createNewDocumentDto.ReceiverUserId">
            <ChildContent>
                <SelectItem Disabled> Выбирите получателя....</SelectItem>
                @foreach (var user in allUsers.AllUsers)
                {
                    <SelectItem TValue="string" Value="@user.Id">
                        @user.Name
                        @user.Surname
                        @user.Patronymic
                        @user.SubdivisionName
                        @user.PositonName
                    </SelectItem>
                }
            </ChildContent>
            <Feedback>
                <ValidationError />
            </Feedback>
        </Select>
    </Validation>


    <h6>Тип документа</h6>
    <Validation>
        <Select @bind-SelectedValue="@createNewDocumentDto.DocumentTypeId">
            <ChildContent>
                <SelectItem Disabled TValue="int"> Выберите тип документа</SelectItem>
                @foreach (var docType in docTypes.DocumentTypes)
                {
                    <SelectItem TValue="int" Value="@docType.Id">
                        @docType.Name
                    </SelectItem>
                }
            </ChildContent>
            <Feedback>
                <ValidationError />
            </Feedback>
        </Select>
    </Validation>
</Validations>
<br />

@* <h6  >Прикрепите файл </h6>
    <Field>
    <FileEdit Changed="@OnInputFileChange" Multiple Filter=".docx, .pdf" />
    </Field>*@
<p>
    <label>
        Прикрепите до @maxAllowedFiles файлов:
        <InputFile OnChange="@OnInputFileChange" multiple />
    </label>
</p>

@if (files.Count > 0)
{
    <div class="card">
        <div class="card-body">
            <ul>
                @foreach (var file in files)
                {
                    <li>

                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-file-earmark-word" viewBox="0 0 16 16">
                            <path d="M5.485 6.879a.5.5 0 1 0-.97.242l1.5 6a.5.5 0 0 0 .967.01L8 9.402l1.018 3.73a.5.5 0 0 0 .967-.01l1.5-6a.5.5 0 0 0-.97-.242l-1.036 4.144-.997-3.655a.5.5 0 0 0-.964 0l-.997 3.655L5.485 6.88z" />
                            <path d="M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5v2z" />
                        </svg> File: @file.Name
                        <br>
                        <Span> @SizeSuffix(file.Size) </Span>
                        <Span>@file.Type</Span>
                        @* @if (FileUpload(uploadResults, file.Name, Logger,
                out var result))
                {
                <span>
                Stored File Name: @result.StoredFileName
                </span>
                }
                else
                {
                <span>
                There was an error uploading the file
                (Error: @result.ErrorCode).
                </span>
                }*@
                    </li>
                }
            </ul>
        </div>
    </div>
}


<br />
<Button Color="Color.Primary" Clicked="@OnSaveClicked"> Создать документ </Button>
<Button Color="Color.Primary" Clicked="@ShowWarningNotification"> ВААААААААААА </Button>
<br />

<br />

@code {
    private HubConnection? hubConnection;
    private NotificationMessage? notificationMessage { get; set; }
    private string? jwtToken;
    //используется для отслеживания количества файлов и отображения их имен
    private List<File> files = new();

    private List<Application.Documents.Commands.CreateNewDocument.UploadResult> uploadResults = new();
    private int maxAllowedFiles = 3;
    private bool shouldRender;
    private bool upload = false;
    protected override bool ShouldRender() => shouldRender;
    MultipartFormDataContent requestContent = new();
    Validations? ValidationsRef { get; set; }

    private string? CreateDocumentId { get; set; }

    Task ShowWarningNotification()
    {

        return NotificationService.Warning("This is a simple notification message!", "Hello");
    }

    CreateNewDocumentDto? createNewDocumentDto { get; set; }

    private DocumentTypeListVm docTypes = new();
    private AllUsersListVm allUsers = new();

    protected override async Task OnInitializedAsync()
    {
        notificationMessage = new();
        createNewDocumentDto = new();
        docTypes.DocumentTypes = new List<DocumentTypeListLookupDto>();
        allUsers.AllUsers = new List<GetAllUsersListDto>();

        docTypes = await Http.GetFromJsonAsync<DocumentTypeListVm>("DocumentType");
        allUsers = await Http.GetFromJsonAsync<AllUsersListVm>("GetUsers/GetAllUsers");

        jwtToken = await jwtTokenProvider.GetJwtToken();
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/notificationHub"), options =>
            {
                options.AccessTokenProvider = () => Task.FromResult(jwtToken);
            })
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<string, string>("ReceiveNotification", (header, body) =>
      {
          notificationMessage.Header = header;
          notificationMessage.Body = body;
          StateHasChanged();
          NotificationService.Success(notificationMessage.Body, notificationMessage.Header);
          StateHasChanged();
      });

        await hubConnection.StartAsync();

    }

    private async Task OnSaveClicked()
    {
        //TODO добавить валидацию (предупреждение что файл не прикреплен)
        if (upload)
        {
            requestContent.Add(new StringContent(createNewDocumentDto.Title), "Title");
            requestContent.Add(new StringContent(createNewDocumentDto.DocumentTypeId.ToString()), "DocumentTypeId");
            requestContent.Add(new StringContent(createNewDocumentDto.ReceiverUserId.ToString()), "ReceiverUserId");
            var httpResponse = await Http.PostAsync("Document/CreateNewDocument/" + jwtToken, requestContent);//createNewDocumentDto
            CreateDocumentId = await httpResponse.Content.ReadAsStringAsync();
            //if (responseString != null)
            //    CreateDocumentId = Convert.ToInt32(responseString);

            // var newUploadResults = await httpResponse.Content
            //     .ReadFromJsonAsync<IList<UploadResult>>();
            //
            // if (newUploadResults is not null)
            // {
            //     uploadResults = uploadResults.Concat(newUploadResults).ToList();
            // }
        }

        shouldRender = true;
        Logger.LogInformation("HandleValidSubmit called");

        if (await ValidationsRef.ValidateAll())
        {
            // await NotificationService.Success("Успех!", "Документ создан");
            // await ValidationsRef.ClearAll();
        }
        else
        {
            await NotificationService.Warning("Ошибка валидации!", "Валидация не пройдена");
        }
        if (CreateDocumentId != null)
            NavigationManager.NavigateTo("/ShowDocument/"+ CreateDocumentId);
    }

    private void NameChanged(string value)
    {
        createNewDocumentDto.Title = FirstUpper(value);
    }

    private string FirstUpper(string str)
    {
        str = str.ToLower();
        return str.Substring(0, 1).ToUpper() + (str.Length > 1 ? str.Substring(1) : "");
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        shouldRender = false;
        //TODO: maxFileSize - вынести в настройки/получать из бэка
        long maxFileSize = 1024 * 150000;
        upload = false;

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            if (uploadResults.SingleOrDefault(
                f => f.FileName == file.Name) is null)
            {
                try
                {
                    files.Add(new() {
                            Name = file.Name,
                            Type = file.ContentType,
                            Size = file.Size
                        });

                    var fileContent =
                        new StreamContent(file.OpenReadStream(maxFileSize));

                    fileContent.Headers.ContentType =
                        new MediaTypeHeaderValue(file.ContentType);

                    requestContent.Add(fileContent, "FilesToUpload", file.Name);
                    upload = true;
                }
                catch (Exception ex)
                {
                    Logger.LogInformation(
                        "{FileName} not uploaded (Err: 6): {Message}",
                        file.Name, ex.Message);

                    uploadResults.Add(
                        new()
                            {
                                FileName = file.Name,
                                ErrorCode = 6,
                                Uploaded = false
                            });
                }
            }
        }
        shouldRender = true;
    }
    private class File
    {
        public string? Name { get; set; }

        public string? Type { get; set; }

        public long Size { get; set; }
    }

    static readonly string[] SizeSuffixes =
                   { "bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB" };
    static string SizeSuffix(long value, int decimalPlaces = 1)
    {
        if (decimalPlaces < 0) { throw new ArgumentOutOfRangeException("decimalPlaces"); }
        if (value < 0) { return "-" + SizeSuffix(-value, decimalPlaces); }
        if (value == 0) { return string.Format("{0:n" + decimalPlaces + "} bytes", 0); }

        // mag is 0 for bytes, 1 for KB, 2, for MB, etc.
        int mag = (int)Math.Log(value, 1024);

        // 1L << (mag * 10) == 2 ^ (10 * mag)
        // [i.e. the number of bytes in the unit corresponding to mag]
        decimal adjustedSize = (decimal)value / (1L << (mag * 10));

        // make adjustment when the value is large enough that
        // it would round up to 1000 or more
        if (Math.Round(adjustedSize, decimalPlaces) >= 1000)
        {
            mag += 1;
            adjustedSize /= 1024;
        }

        return string.Format("{0:n" + decimalPlaces + "} {1}",
            adjustedSize,
            SizeSuffixes[mag]);
    }

    public bool IsConnected =>
      hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}


