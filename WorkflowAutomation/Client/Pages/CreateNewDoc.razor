@page "/CreateNewDoc"
@using Microsoft.Extensions.Logging;
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using WorkflowAutomation.Application.Documents.Queries.GetSubdivisionList

@using WorkflowAutomation.Application.Documents.Commands.CreateNewDocument
@using WorkflowAutomation.Application.DocType.Queries.GetDocumentTypeListQuery
@using WorkflowAutomation.Application.Users.Queries.GetAllUsers

@attribute [Authorize]
@inject HttpClient Http
@inject ILogger<Test> Logger
@inject INotificationService NotificationService

    
    <h3>Создать новый документ</h3>
    <hr/>

    <h6>Тема</h6>
    
    <Validations @ref="@ValidationsRef" Mode="ValidationMode.Manual" Model="@createNewDocumentDto" ValidateOnLoad="true"> 
        <Validation>
    <TextEdit id="Title" class="form-control" @bind-Text="@createNewDocumentDto.Title">
             <Feedback >            
            <ValidationError/>
             </Feedback>
        </TextEdit>
        </Validation>
   
    

    
    <h6 >Получатель</h6>
    
    <Validation>
    <Select @bind-SelectedValue="@createNewDocumentDto.ReceiverUserId">
        <ChildContent>
            
            <SelectItem Disabled> Выбирите получателя....</SelectItem>
            @foreach (var user in allUsers.AllUsers)
            {
                <SelectItem TValue="string" Value="@user.Id"> 
                    @user.Name
                    @user.Surname 
                    @user.Patronymic 
                    @user.SubdivisionName 
                    @user.PositonName   
                    </SelectItem>
            }
        </ChildContent>
        <Feedback>
            <ValidationError/>
        </Feedback>    
    </Select>
    </Validation>
    

    <h6>Тип документа</h6>
    <Validation>
    <Select @bind-SelectedValue="@createNewDocumentDto.DocumentTypeId">
        <ChildContent>
            <SelectItem Disabled TValue="int"> Выберите тип документа</SelectItem>
            @foreach (var docType in docTypes.DocumentTypes)
            {
                <SelectItem TValue="int" Value="@docType.Id">
                    @docType.Name
                </SelectItem>
            }
        </ChildContent>
        <Feedback>
            <ValidationError />
        </Feedback>
    </Select>
</Validation>
</Validations>
    <br />
    <h6  >Прикрепите файл </h6>
    <Field>
        <FileEdit Changed="@OnChanged" Multiple Filter=".docx, .pdf"  />
    </Field>

    <br/>
<Button Color="Color.Primary" Clicked="@OnSaveClicked"> Создать документ </Button>
<Button Color="Color.Primary" Clicked="@ShowWarningNotification"> ВААААААААААА </Button>
    <br />

<br />

@code {
    Validations? ValidationsRef { get; set; }

    Task ShowWarningNotification()
    {
        
        return NotificationService.Warning("This is a simple notification message!", "Hello");
    }

    // DocTypeDto docTypeDto = new DocTypeDto();
    CreateNewDocumentDto? createNewDocumentDto{ get; set; }  

    private DocumentTypeListVm docTypes = new();
    private AllUsersListVm allUsers = new();

    protected override async Task OnInitializedAsync()
    {
        createNewDocumentDto = new();
        docTypes.DocumentTypes = new List<DocumentTypeListLookupDto>();
        allUsers.AllUsers = new List<GetAllUsersListDto>();

        docTypes = await Http.GetFromJsonAsync<DocumentTypeListVm>("DocumentType");
        allUsers = await Http.GetFromJsonAsync<AllUsersListVm>("GetUsers/GetAllUsers");



    }
    private async Task OnSaveClicked()
    {
        var httpResponse = await Http.PostAsJsonAsync<CreateNewDocumentDto>("/Document", createNewDocumentDto);
        Logger.LogInformation("HandleValidSubmit called");

        if (await ValidationsRef.ValidateAll())
        {
            await NotificationService.Success("УРА!", "Hello");
            await ValidationsRef.ClearAll();
        }
        else
        { 
            await NotificationService.Warning("НеУРА!", "Hello");
        }

    }

    private void NameChanged(string value)
    {
        createNewDocumentDto.Title = FirstUpper(value);
    }

    private string FirstUpper(string str)
    {
        str = str.ToLower();
        return str.Substring(0, 1).ToUpper() + (str.Length > 1 ? str.Substring(1) : "");
    }
    Task OnChanged(FileChangedEventArgs e)
    {
        return Task.CompletedTask;
    }
}


