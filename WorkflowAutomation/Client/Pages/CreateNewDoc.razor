@page "/CreateNewDoc"
@using Microsoft.Extensions.Logging;
@using System.ComponentModel.DataAnnotations;
@inject ILogger<Test> Logger
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using WorkflowAutomation.Application.Documents.Queries.GetSubdivisionList;
@using WorkflowAutomation.Shared
@using WorkflowAutomation.Application.Documents.Commands.CreateNewDocument
@using WorkflowAutomation.Application.DocType.Queries.GetDocumentTypeListQuery;
@attribute [Authorize]
@inject HttpClient Http


        <EditForm Model="@createNewDocumentDto" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

<h3>Создать новый документ</h3>
<h6>Введите название документа</h6>
<h6>Тема</h6>

<InputText id="Title" @bind-Value="createNewDocumentDto.Title" />

    <h6>Выберите получателя</h6>
    @*<select class="form-control" @bind="@createNewDocumentDto.ReceiverUserId">


        @foreach (var rec in receivers)
        {
            <option value="@rec.Id"> @rec.FullName, должность @rec.Position  </option>
        }
        }

    </select>*@

    <h6>Выберите тип документа</h6>
    <InputSelect id="selectValue" class="form-control" @bind-Value="@createNewDocumentDto.DocumentTypeId" >

        @foreach (var doc in docTypes.DocumentTypes)
        {
            <option value="@doc.Id"> @doc.Name</option>
        }
    </InputSelect>

    <br/>
</EditForm>
<br/>








@code {
    // DocTypeDto docTypeDto = new DocTypeDto();
    CreateNewDocumentDto createNewDocumentDto = new CreateNewDocumentDto();

    private DocumentTypeListVm docTypes = new();

    protected override async Task OnInitializedAsync()
    {
        docTypes.DocumentTypes = new List<DocumentTypeListLookupDto>();
        // try
       // {
       //     receivers = new ReceiverDto[]{
       //         new ReceiverDto{
       //             Id = Guid.NewGuid(),
       //             FullName = "ВВВ",
       //             Position = "BBBFree" },
       //         new ReceiverDto{
       //             Id = Guid.NewGuid(),
       //             FullName = "AAA",
       //             Position = "AAAFree" },
       //         new ReceiverDto{
       //             Id = Guid.NewGuid(),
       //             FullName = "CCC",
       //             Position = "CCCFree" },
       //
       //
       //
       // };
       // // receivers = await Http.GetFromJsonAsync<ReceiverDto[]>("ReceiverDto");
       // }
       // catch (AccessTokenNotAvailableException exception)
       // {
       //     exception.Redirect();
       // }

       // try
       // {
         //   docTypes = new DocTypeDto[] { new DocTypeDto { Id = 1, Name = "Служеная записка" }, new DocTypeDto { Id = 2, Name = "Приказ" } };
        docTypes = await Http.GetFromJsonAsync<DocumentTypeListVm>("DocumentType");
      //  }
       // catch (AccessTokenNotAvailableException exception)
       // {
       //     exception.Redirect();
       // }
    }

  //  public class NewDocDto
  //  {
  //      [Required]
  //      [StringLength(10, ErrorMessage = "Name is too long.")]
  //      public string? Title { get; set; }
  //
  //      [Required]
  //      [StringLength(10, ErrorMessage = "Name is too long.")]
  //      public Guid ReceiverId { get; set; }
  //
  //      public int DoctypeId { get; set; }
  //
  //  }


    private void HandleValidSubmit()
    {
        Logger.LogInformation("HandleValidSubmit called");

    }

    }


