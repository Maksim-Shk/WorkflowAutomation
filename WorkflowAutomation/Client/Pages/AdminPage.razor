@page "/adminpage"

@using WorkflowAutomation.Application.Roles.Queries.GetRolesList
@using WorkflowAutomation.Application.Users.Queries.GetAllUsers
@using WorkflowAutomation.Application.Roles.Commands.SetRoleToUser

@using Microsoft.AspNetCore.Identity.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.Extensions.Logging

@using System.ComponentModel.DataAnnotations;
@using System.Security.Claims

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize(Roles = "Админ")];
<PageTitle>Админ</PageTitle>

<EditForm Model="@roleDto" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />

    <h6>Выберите пользователя</h6>
    <InputSelect id="selectAllowedUser" class="form-control" @bind-Value="@roleDto.UserId">

        @foreach (var user in UsersVm.AllUsers)
        {
            <option value="@user.Id"> @user.Name @user.Surname @user.Patronymic @user.SubdivisionName @user.PositonName </option>
        }
    </InputSelect>
    <h6>Выберите роль</h6>
    <InputSelect id="selectRole" class="form-control" @bind-Value="@roleDto.RoleId">

        @foreach (var role in RolesVm.Roles)
        {
            <option value="@role.RoleId"> @role.Name </option>
        }
    </InputSelect>
    <button type="submit" class="btn btn-primary"> Присвоить роль </button>

    <br />
</EditForm>

@code {
    //[CascadingParameter]
    //private Task<AuthenticationState>? authenticationState { get; set; }

    AllUsersListVm UsersVm = new();
    RolesListVm RolesVm = new();
    SetRoleToUserDto roleDto = new();

    protected override async Task OnInitializedAsync()
    {
        //if (authenticationState != null)
        //{
        //var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        //var user = authState?.User;
        //if (user.IsInRole("Админ"))
        //{
            try
            {
                UsersVm.AllUsers = new List<GetAllUsersListDto>();
                RolesVm.Roles = new List<RolesListLookupDto>();
                UsersVm = await Http.GetFromJsonAsync<AllUsersListVm>("GetUsers/GetAllUsers");
                RolesVm = await Http.GetFromJsonAsync<RolesListVm>("Role");
            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }
       // }
        //else
        //{
        //    NavigationManager.NavigateTo("/wrong-role");
        //}
    }

    private async Task HandleValidSubmit()
    {
        var httpResponse = await Http.PutAsJsonAsync("Role/", roleDto);
    }
}
