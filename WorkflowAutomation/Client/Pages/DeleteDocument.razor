@page "/DeleteDocument"

@using WorkflowAutomation.Application.Documents.Queries.GetAllowedDocumentList
@using WorkflowAutomation.Application.Documents.Queries.GetDocumentList
@using WorkflowAutomation.Application.Documents.Commands.DeleteDocument

@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.ComponentModel.DataAnnotations

@inject HttpClient httpClient
@inject NavigationManager NavigationManager

@*@attribute [Authorize(Roles = "Админ")]*@
@*@attribute [Authorize(Policy = "AdminPolicy")]*@ 
@*@attribute [Authorize(Roles = "Зарегистрированный пользователь")]*@

<EditForm Model="@deleteDocumentDto" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    

    <h6>Выберите документ для удаления</h6>
    <InputSelect id="selectDoc" class="form-control" @bind-Value="@deleteDocumentDto.DocumentId">

        @foreach (var doc in allowedDocumentListVm.AllowedDocuments)
        {
            @if (doc.RemoveDate ==null){
                <option value="@doc.Id"> " @doc.Title " Отправитель: @doc.SenderInfo Получатель: @doc.RecieverInfo 
                    Тип - @doc.DocumentType</option>
            }
        }
    </InputSelect>
   <button type="submit" class="btn btn-primary"> Удалить документ </button>

    <br />
</EditForm>
<br />

@code {
    // DocTypeDto docTypeDto = new DocTypeDto();
    DeleteDocumentDto deleteDocumentDto = new ();

    AllowedDocumentListVm allowedDocumentListVm = new();

    protected override async Task OnInitializedAsync()
    {
        allowedDocumentListVm.AllowedDocuments = new List<GetAllowedDocumentListLookupDto>();
        allowedDocumentListVm = await httpClient.GetFromJsonAsync<AllowedDocumentListVm>("Document/GetAllowedDocuments");


        //foreach (var doc in documentListVm.Documents)
        //{
        //    if (doc.RemoveDate != null)
        //        documentListVm.Documents.Remove(doc);
        //}

    }
    private async Task HandleValidSubmit()
    {
        var httpResponse = await httpClient.PutAsJsonAsync("Document/" + deleteDocumentDto.DocumentId, deleteDocumentDto);
        var http = await httpClient.PutAsJsonAsync("sa/", deleteDocumentDto);
        //NavigationManager.NavigateTo("/ViewDocumentList");
    }
}


