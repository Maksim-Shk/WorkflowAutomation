@page "/registration"

@using Microsoft.Extensions.Logging;
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using WorkflowAutomation.Domain
@using WorkflowAutomation.Application.Documents.Queries.GetSubdivisionList
@using WorkflowAutomation.Application.Documents.Queries.GetPositionList
@using WorkflowAutomation.Application.Documents.Commands.UserInfoCommand

<div class="card">
    <h4 class="card-header">Регистрация</h4>
    <div class="card-body">
        <EditForm Model="@regdto" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <label>Логин</label>
            <div class="form-group">                
                <InputText id="login" style="margin-block:10px" class="form-control" placeholder="Логин " @bind-Value="regdto.Login" />
                <ValidationMessage For="@(() => regdto.Login)" style="margin-bottom:10px" />
            </div>
            <div class="form-group">
                <label>Пароль</label>
                <InputText id="password" style="margin-block:10px" class="form-control" placeholder="Пароль "
                           @bind-Value="regdto.Password" />
                <ValidationMessage For="@(() => regdto.Password)" style="margin-bottom:10px" />
            </div>
            <div class="form-group">
                <label>Повторить пароль</label>
                <InputText id="repeatpassword" style="margin-block:10px" class="form-control" placeholder="Повторите пароль "
                           @bind-Value="regdto.RepeatPassword" />
                <ValidationMessage For="@(() =>regdto.RepeatPassword)" RepeatPasswordstyle="margin-bottom:10px" />
            </div>            
            <button type="submit" class="btn btn-primary">            
                Зарегистрироваться
                    </button>
            <NavLink href="" class="btn btn-link">Отмена</NavLink>
        </EditForm>
    </div>
</div>

@code {
   private RegistrationDto regdto;
    
    public class RegistrationDto {

        
        [StringLength(50, MinimumLength = 2, ErrorMessage = "Логин должен быть не менее 2-х символов и не более 50-ти")]
        [RegularExpression(@"/^[A-Z]+([-_]?[A-Z0-9]+){0,2}$/i", ErrorMessage = "Логин должен сожерать только латиницу и цифры")]
        public string Login{ get; set; }

        
        public string Password { get; set; }

        
        public string RepeatPassword { get; set; }
    }

    private async void HandleValidSubmit()
    {
      
    }
    protected override async Task OnInitializedAsync()
    {

        try
        {
            regdto = new RegistrationDto();

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}
