@page "/CreateNewUserInfo"

@using System.ComponentModel.DataAnnotations;
@using Microsoft.Extensions.Logging;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using WorkflowAutomation.Client.Models;
@using WorkflowAutomation.Domain
@using WorkflowAutomation.Application.Documents.Queries.GetSubdivisionList
@using WorkflowAutomation.Application.Documents.Queries.GetPositionList
@using WorkflowAutomation.Application.Documents.Commands.UserInfoCommand

@attribute [Authorize]

@inject HttpClient Http
@inject NavigationManager NavigationManager

<EditForm Model="@createUserInfoDto" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <h3>Заполнить данные пользователя</h3>
    <hr />
    <div class="card">
        <div class="card-body">
            <div class="form-group row">
                
                    <label for="firstName" class="col-sm-2 col-form-label">
                        Имя
                    </label>
                
                <div class="col-sm-10">
                    <InputText id="firstName" style="margin-block:10px" class="form-control" placeholder="Имя "
                               Value="@createUserInfoDto.Name" ValueChanged="NameChanged" ValueExpression="() => createUserInfoDto.Name" />
                    <ValidationMessage For="@(() => createUserInfoDto.Name)" style="margin-bottom:10px" />
                </div>
            </div>

            <div class="form-group row">
                <label for="surname" class="col-sm-2 col-form-label">
                    Фамилия
                </label>
                <div class="col-sm-10">
                    <InputText id="surname" class="form-control" placeholder="Фамилия"
                               Value="@createUserInfoDto.Surname" ValueChanged="SurnameChanged" ValueExpression="() => createUserInfoDto.Surname" />
                    <ValidationMessage For="@(() => createUserInfoDto.Surname)" style="margin-bottom:10px" />
                </div>
            </div>
            <div class="form-group row">
                <label for="patronymic" class="col-sm-2 col-form-label" style="margin-bottom:10px">
                    Отчество
                </label>
                <div class="col-sm-10">
                    <InputText id="patronymic" class="form-control" placeholder="Отчество"
                               Value="@createUserInfoDto.Patronymic" ValueChanged="PatronymicChanged" ValueExpression="() => createUserInfoDto.Patronymic" />
                    <ValidationMessage For="@(() => createUserInfoDto.Patronymic)" style="margin-bottom:10px" />
                </div>
            </div>
        </div>
    </div>
    <div class="card">
        <div class="card-body">
            <div class="form-group row">
                <label for="subdivid" class="col-sm-2 col-form-label">
                    Позразделение
                </label>
                <div class="col-sm-10">
                    <InputSelect id="idsubdiv" @bind-Value="createUserInfoDto.IdSubdivision" class="form-control">

                        @* <option disabled value="0" style="display:none"> -- Выберите подразделение -- </option>*@
                        @foreach (var sub in subdivisionListVm.Subdivisions)
                        {

                            <option value="@sub.Id">@sub.Name</option>
                        }
                        <ValidationMessage For="@(() => createUserInfoDto.IdSubdivision)" style="margin-bottom:10px" />
                    </InputSelect>

                </div>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            <div class="form-group row">
                <label for="positions" class="col-sm-2 col-form-label">
                    Должность
                </label>
                <div class="col-sm-10">
                    <InputSelect id="positionId" @bind-Value="createUserInfoDto.IdPositon" class="form-control">

                        @foreach (var pos in positionListVm.Positions)
                        {
                            <option value="@pos.Id">@pos.Name</option>
                        }

                    </InputSelect>

                </div>
            </div>
        </div>
    </div>
    <button type="submit" class="btn btn-primary">Отправить данные</button>
</EditForm>

@code {
    [CascadingParameter]
    protected UserInfo? CurrentUserInformation { get; set; }

    private CreateUserInfoDto createUserInfoDto = new();
    private SubdivisionListVm subdivisionListVm = new();
    private PositionListVm positionListVm = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            subdivisionListVm.Subdivisions = new List<SubdivisionListLookupDto>();
            positionListVm.Positions = new List<PositionListLookupDto>();

            subdivisionListVm = await Http.GetFromJsonAsync<SubdivisionListVm>("Subdivision");
            positionListVm = await Http.GetFromJsonAsync<PositionListVm>("Position");

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
    private async void HandleValidSubmit()
    {
        var httpResponse = await Http.PostAsJsonAsync<CreateUserInfoDto>("/UserInfo", createUserInfoDto);
        if (httpResponse.IsSuccessStatusCode)
        {
            CurrentUserInformation.Name = createUserInfoDto.Name;
            CurrentUserInformation.Patronomic = createUserInfoDto.Patronymic;
            CurrentUserInformation.IsInfoFull = true;
        }
        NavigationManager.NavigateTo("/");
    }

    private void NameChanged(string value)
    {
        createUserInfoDto.Name = FirstUpper(value);
    }

    private void SurnameChanged(string value)
    {
        createUserInfoDto.Surname = FirstUpper(value);
    }

    private void PatronymicChanged(string value)
    {
        createUserInfoDto.Patronymic = FirstUpper(value);
    }

    private string FirstUpper(string str)
    {
        str = str.ToLower();
        str = str.Replace(" ", "");
        return str.Substring(0, 1).ToUpper() + (str.Length > 1 ? str.Substring(1) : "");
    }
}


