@page "/CreateNewUserInfo"
@using Microsoft.Extensions.Logging;
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using WorkflowAutomation.Shared
@using WorkflowAutomation.Domain
@using WorkflowAutomation.Application.Documents.Queries.GetSubdivisionList
@using WorkflowAutomation.Application.Documents.Queries.GetPositionList
@attribute [Authorize]
@inject HttpClient Http



<EditForm Model="@createUserInfoDto">
    <h3>Заполнить данные пользователя</h3>
    <hr />
    <div class="form-group row">
        <label for="firstName" class="col-sm-2 col-form-label">
            Имя
        </label>
        <div class="col-sm-10">
            <InputText id="firstName" class="form-control" placeholder="Имя"
                       @bind-Value="createUserInfoDto.Name" />
        </div>
    </div>
    <div class="form-group row">
        <label for="surname" class="col-sm-2 col-form-label">
            Фамилия
        </label>
        <div class="col-sm-10">
            <InputText id="surname" class="form-control" placeholder="Фамилия"
                       @bind-Value="createUserInfoDto.Surname" />
        </div>
    </div>
    <div class="form-group row">
        <label for="patronymic" class="col-sm-2 col-form-label">
            Отчество
        </label>
        <div class="col-sm-10">
            <InputText id="patronymic" class="form-control" placeholder="Отчество"
                       @bind-Value="createUserInfoDto.Patronymic"/>
        </div>
    </div>

    <div class="form-group row">
        <label for="subdivid" class="col-sm-2 col-form-label">
            Позразделение 
        </label>
        <div class="col-sm-10">
            <InputSelect id="idsubdiv" @bind-Value="createUserInfoDto.IdSubdivision" class="form-control">
                @foreach (var sub in subdivisionListVm.Subdivisions)
                {
                    <option value="@sub.Id">@sub.Name</option>
                }
            </InputSelect>
        </div>
    </div>

    <div class="form-group row">
        <label for="positions" class="col-sm-2 col-form-label">
            Позразделение
        </label>
        <div class="col-sm-10">
            <InputSelect id="positionId" @bind-Value="createUserInfoDto.IdPositon" class="form-control">
                @foreach (var pos in positionListVm.Positions)
                {
                    <option value="@pos.Id">@pos.Name</option>
                }
            </InputSelect>
        </div>
    </div>
@*
    <div class="form-group row">
        <label for="idposition" class="col-sm-2 col-form-label">
            Должность
        </label>
        <div class="col-sm-10">
            <InputNumber id="idposition" class="form-control" placeholder="Должность"
                         @bind-Value="model.IdPositon" />
        </div>
    </div>*@
    
    @*<div class="form-group row">
        <label for="department" class="col-sm-2 col-form-label">
            Department
        </label>
        <div class="col-sm-10">
            <InputSelect id="department" @bind-Value="DepartmentId" class="form-control">
                @foreach (var dept in Departments)
                {
                    <option value="@dept.DepartmentId">@dept.DepartmentName</option>
                }
            </InputSelect>
        </div>
    </div>*@
</EditForm>





@code {
    // private CreateUserInfoDto model = new();
    private CreateUserInfoDto createUserInfoDto = new();
    private SubdivisionListVm subdivisionListVm = new();
    private PositionListVm positionListVm = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            subdivisionListVm.Subdivisions = new List<SubdivisionListLookupDto>();
            positionListVm.Positions = new List<PositionListLookupDto>();

            subdivisionListVm = await Http.GetFromJsonAsync<SubdivisionListVm>("Subdivision");
            positionListVm = await Http.GetFromJsonAsync<PositionListVm>("Position");
           
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }     
    }
}


