@using WorkflowAutomation.Application.Positions.Queries.GetPositionList
@using WorkflowAutomation.Application.Users.Queries.GetPositionUsers
@using Blazorise.DataGrid
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@page "/AdminPosition"

<PageTitle>Упраление должностями</PageTitle>

<Breadcrumb Mode="BreadcrumbMode.Auto">
    <BreadcrumbItem>
        <BreadcrumbLink To="/Admin">Администрирование СЭД</BreadcrumbLink>
    </BreadcrumbItem>
    <BreadcrumbItem>
        <BreadcrumbLink To="/AdminPosition">Упраление должностями</BreadcrumbLink>
    </BreadcrumbItem>
</Breadcrumb>

<hr />
<h2 style="text-align: center">Упраление должностями</h2>
<hr />

<Card Margin="Margin.Is4.OnX.Is4.OnY">
    <CardTitle Margin="Margin.Is4.OnX.Is4.OnY" Size=" 3">
        Список должностей
    </CardTitle>
    <CardText Margin="Margin.Is4.OnX.Is4.OnY">
        Просмотр и редактирование должностей
    </CardText>

    @foreach (var position in positionListVm.Positions)
    {
        <Collapse>
            <CollapseHeader>
                <Heading Size="HeadingSize.Is5">
                    <AccordionToggle>
                        <b>@position.Name </b>
                        <Button Color="Color.Primary">
                            <Icon Name="IconName.Edit" />
                            @* Редактировать*@
                        </Button>
                        @*  Clicked=@ShowPositionUsers(@position.id)*@

                        <Button Color="Color.Primary" @onclick="(() => ShowPositionUsers(position))">
                            <Icon Name="IconName.Eye" />
                            @*      Показать*@
                        </Button>
                        @*   <b>@group.GroupName</b>: @group.StatisticSet.Count*@
                    </AccordionToggle>
                </Heading>
            </CollapseHeader>
            <CollapseBody>
                <DataGrid TItem="PositionUserDto"
                      Data="@position.positionUsers"
                        Responsive
                        Filterable
                        Sortable
                      SortMode="DataGridSortMode.Multiple"
                        ShowPager
                        ShowPageSizes
                      PagerPosition="DataGridPagerPosition.Bottom"
                      PagerOptions="new(){ ButtonSize=Blazorise.Size.Medium}">
                <DataGridColumns>
                    <DataGridColumn Field="@nameof(PositionUserDto.FullName)" Caption="Полное имя" Filterable="false"></DataGridColumn>
                    <DataGridColumn Field="@nameof(PositionUserDto.SubdivisionName)" Caption="Подразделение" Filterable="false"></DataGridColumn>
                    <DataGridColumn Field="@nameof(PositionUserDto.AppointmentDate)" Caption="Дата начала работы" Filterable="false"></DataGridColumn>
                </DataGridColumns>
                </DataGrid>
                </CollapseBody>
                </Collapse>
    }



</Card>

@code {
    public PositionListVm positionListVm = new();
    protected override async Task OnInitializedAsync()
    {
        positionListVm.Positions = new List<PositionListLookupDto>();
        try
        {
            positionListVm = await httpClient.GetFromJsonAsync<PositionListVm>("Position/");
            foreach (var position in positionListVm.Positions)
            {
                var response = await httpClient.GetFromJsonAsync<PositionUsersListVm>("UserInfo/PositionUsers/" + position.Id);
                position.positionUsers = response.Users.ToList();
                position.IsRender = true;
            }
        }
        catch
        {
            NavigationManager.NavigateTo("/Admin");
        }
    }

    public async Task ShowPositionUsers(PositionListLookupDto position)
    {
        if (position.IsRender == false)
        {
            var response = await httpClient.GetFromJsonAsync<PositionUsersListVm>("UserInfo/PositionUsers/" + position.Id);
            position.positionUsers = response.Users.ToList();
            position.IsRender = true;
        }
        else position.IsRender = false;

    }
}


<style>
    a {
        text-decoration: none;
        color: black;
    }
</style>