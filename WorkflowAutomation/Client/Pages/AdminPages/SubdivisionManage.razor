@page "/SubdivisionManage"

@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using WorkflowAutomation.Application.Documents.Queries.GetSubdivisionList
@using Blazorise.TreeView

@inject HttpClient Http

<hr />
<h2 style="text-align: center">Упраление подразделениями</h2>
<hr />

<TreeView @ref="@treeViewRef" Nodes="Items"
          GetChildNodes="@(item => item.GetChilds(item.Id))"
          HasChildNodes="@(item => item.GetChilds(item.Id)?.Any() == true)"
          @bind-SelectedNode="selectedNode">
    <NodeContent>
        @context.Name
    </NodeContent>
</TreeView>

<TextEdit @bind-Text="searchItemName">

</TextEdit>

<Button Clicked="@SearchClick">
    Поиск
</Button>
@if (SearchResult != null)
{
    <ListView Title="Поиск"
          Data="SearchResult"
          TextField="(item)=> item.Name"
          ValueField="(item)=>item.Id.ToString()"
          Mode="ListGroupMode.Selectable"
          @bind-SelectedItem="selectedNode">
        <ItemTemplate>
            <a href="SubDivisionInfo/@context.Item.Id"> @context.Item.Name</a>
        </ItemTemplate>
    </ListView>
}

@code {
    private TextEdit SearchOutput = new();
    private void SearchClick()
    {
        List<Item> NodesForSearch = new List<Item>();
        NodesForSearch.AddRange(Items);
        NodesForSearch.AddRange(AllItems);
        SearchResult = NodesForSearch.Where(node => node.Name.Contains(searchItemName,StringComparison.OrdinalIgnoreCase)).ToList();
        //treeViewRef.ExpandedNodes.Add(SearchItem);
        StateHasChanged();
    }
    string searchItemName = "";
    Item SearchNode { get; set; } = new();

    TreeView<Item> treeViewRef;
    List<Item> SearchResult { get; set; } = new();
    
    private List<Item> Items;
    public static List<Item> AllItems;

    public class Item
    {
        public int Id { get; set; }
        public int? SubId { get; set; }
        public string Name { get; set; }
        //public List<Item> Children { get; set; }

        public List<Item> GetChilds(int id)
        {
            List<Item> ans = new List<Item>();
            ans = AllItems.Where(x => x.SubId == id).ToList();
            return ans;
        }
    }



    private IList<Item> expandedNodes = new List<Item>();
    private Item selectedNode = new();


    private SubdivisionListVm subdivisionListVm = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            subdivisionListVm.Subdivisions = new List<SubdivisionListLookupDto>();
            subdivisionListVm = await Http.GetFromJsonAsync<SubdivisionListVm>("Subdivision");
            Items = new List<Item>();
            AllItems = new List<Item>();
            foreach (var sub in subdivisionListVm.Subdivisions.Where(x => x.IdSubordination == null))
            {
                Item item = new Item() { Id = sub.Id, Name = sub.Name, SubId = sub.IdSubordination };
                Items.Add(item);
            }
            foreach (var sub in subdivisionListVm.Subdivisions.Where(x => x.IdSubordination != null))
            {
                Item item = new Item() { Id = sub.Id, Name = sub.Name, SubId = sub.IdSubordination };
                AllItems.Add(item);
            }

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

}
