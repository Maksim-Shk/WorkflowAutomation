@page "/SubdivisionManage"

@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using WorkflowAutomation.Application.Documents.Queries.GetSubdivisionList
@using WorkflowAutomation.Application.Subdivisions.Queries.GetSubdivisionInfo
@using Blazorise.TreeView
@using BlazorContextMenu

@inject HttpClient Http
<link href="/css/SundivisonManage.css" rel="stylesheet" />

<hr />
<h2 style="text-align: center">Упраление подразделениями</h2>
<hr />

<Switch TValue="bool" @bind-Checked=@Render>
    @if (Render) {
        <Label>Древовидная струкрутра</Label>
       // @SelectedChangeTree();
    }
    else{
        <Label> Поиск</Label>
        //@SelectedChangeList();
    }
</Switch>

@if (Render)
{
    <TreeView @ref="@treeViewRef" Nodes="Items"
          GetChildNodes="@(item => item.GetChilds(item.Id))"
          HasChildNodes="@(item => item.GetChilds(item.Id)?.Any() == true)"
          @bind-SelectedNode="selectedNodeTreeView"
          @onclick="()=>SelectedChangeTree()">
        <NodeContent >
            @context.Name
        </NodeContent>
    </TreeView>
}
else{
<div class="subscribe">
<TextEdit @bind-Text="searchItemName">

</TextEdit>
<Button class="btn-primary" Clicked="@SearchClick">
    Поиск
</Button>
</div>


@if (SearchResult != null)
{
    <ListView Title="Поиск"
          Data="SearchResult"
          TextField="(item)=> item.Name"
          ValueField="(item)=>item.Id.ToString()"
          Mode="ListGroupMode.Selectable"
          @bind-SelectedItem="selectedNodeListView"
          @onclick="()=>SelectedChangeList()"
          >
        <ItemTemplate>  
            <a href="SubDivisionInfo/@context.Item.Id" > @context.Item.Name</a>
        </ItemTemplate>
    </ListView>
}}

@* Информация о выбранном подразделений*@
@if (selectedNodeListView != null || selectedNodeTreeView != null) 
{ 
<h2>Подразделение </h2>
<hr />
<dl class="row">
    <dt class="col-sm-3">
        Название
    </dt>
    <dd class="col-sm-8">
        @subdivisionInfoDto.Name
    </dd>
    <dt class="col-sm-3">
        Дата создания
    </dt>
    <dd class="col-sm-8">
        @subdivisionInfoDto.CreateDate
    </dd>
    <dt class="col-sm-3">
        Сотрудники
    </dt>

    <dd class="col-sm-8">
        @foreach (var posId in PositionsIdList)
        {
            @if (posId != null)
            {
                @foreach (var item in subdivisionInfoDto.Users.Where(x => x.PositionId == posId).ToList())
                {
                    @if (item != null)
                    {
                        <div>@item.Name @item.Position </div>
                    }
                }
                <hr />
            }
        }
    </dd>
    </dl>

    <ContextMenu Id="myMenu">
    
</ContextMenu>

<ContextMenuTrigger MenuId="myMenu">
    <p>Right-click on me to show the context menu !!</p>
</ContextMenuTrigger>
}
else{
    <Label>empty</Label>
}





@code {
    void OnClick(ItemClickEventArgs e)
    {
        
    }

    bool Render;
    private TextEdit SearchOutput = new();

    private void SelectedChangeList() {
        selectedNodeTreeView = null;
        OnClickSubdivision();
        StateHasChanged();

    }
    private void SelectedChangeTree()
    {
        selectedNodeListView = null;
        OnClickSubdivision();
        StateHasChanged();
    }



    private void SearchClick()
    {
        List<Item> NodesForSearch = new List<Item>();
        NodesForSearch.AddRange(Items);
        NodesForSearch.AddRange(AllItems);
        SearchResult = NodesForSearch.Where(node => node.Name.Contains(searchItemName,StringComparison.OrdinalIgnoreCase)).ToList();
        //treeViewRef.ExpandedNodes.Add(SearchItem);
        StateHasChanged();
    }
    string searchItemName = "";
    Item SearchNode { get; set; } = new();

    TreeView<Item> treeViewRef;
    List<Item> SearchResult { get; set; } = new();

    private List<Item> Items;
    public static List<Item> AllItems;

    public class Item
    {
        public int Id { get; set; }
        public int? SubId { get; set; }
        public string Name { get; set; }
        //public List<Item> Children { get; set; }

        public List<Item> GetChilds(int id)
        {
            List<Item> ans = new List<Item>();
            ans = AllItems.Where(x => x.SubId == id).ToList();
            return ans;
        }
    }



    private IList<Item> expandedNodes = new List<Item>();
    private Item? selectedNodeTreeView { get; set; }
    private Item? selectedNodeListView { get; set; }

    private SubdivisionListVm subdivisionListVm = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {  
            selectedNodeTreeView = null;
            selectedNodeListView = null;
            #region Инфромация о поздразделениях
            subdivisionListVm.Subdivisions = new List<SubdivisionListLookupDto>();
            subdivisionListVm = await Http.GetFromJsonAsync<SubdivisionListVm>("Subdivision");
            Items = new List<Item>();
            AllItems = new List<Item>();
            foreach (var sub in subdivisionListVm.Subdivisions.Where(x => x.IdSubordination == null))
            {
                Item item = new Item() { Id = sub.Id, Name = sub.Name, SubId = sub.IdSubordination };
                Items.Add(item);
            }
            foreach (var sub in subdivisionListVm.Subdivisions.Where(x => x.IdSubordination != null))
            {
                Item item = new Item() { Id = sub.Id, Name = sub.Name, SubId = sub.IdSubordination };
                AllItems.Add(item);
            }
            #endregion


        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    public List<int> PositionsIdList { get; set; } = new();
    public SubdivisionInfoDto subdivisionInfoDto { get; set; } = new();


    private async Task OnClickSubdivision() {
        try
        {
            Item? SelectedItem = new();
            if (selectedNodeListView != null)
            {
                SelectedItem = selectedNodeListView;
            }
            else if (selectedNodeTreeView != null)
            {
                SelectedItem = selectedNodeTreeView;
            }
            subdivisionInfoDto.Users = new();
            if (SelectedItem != null)
            {
                subdivisionInfoDto = await Http.GetFromJsonAsync<SubdivisionInfoDto>("Subdivision/GetSubdivisionInfo/" + SelectedItem.Id.ToString());

                var positions = subdivisionInfoDto.Users
                                .GroupBy(x => x.PositionId)
                                .Select(x => x.First())
                                .ToList()
                                .Select(e => new
                                {
                                    Name = e.Position,
                                    IdPosition = e.PositionId
                                }).ToList();

                PositionsIdList = new List<int>();
                foreach (var pos in positions)
                {
                    PositionsIdList.Add(pos.IdPosition);
                }
                StateHasChanged();
            }
        }
        catch
        {
            return;
        }
    }
}
