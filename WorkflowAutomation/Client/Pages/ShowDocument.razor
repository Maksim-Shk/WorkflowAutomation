@page "/ShowDocument/{Id:int}"
@using WorkflowAutomation.Shared;
@using WorkflowAutomation.Application.Documents.Queries.GetOneDocument
@using WorkflowAutomation.Application.Statuses.Commands.ChangeStatus;
@using WorkflowAutomation.Application.Users.Queries.GetUserInfo;

@using Microsoft.AspNetCore.SignalR.Client;
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.ComponentModel.DataAnnotations

@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject HttpClient httpClient
@inject JwtTokenProvider jwtTokenProvider
@inject INotificationService NotificationService
@implements IAsyncDisposable
@*@inject AuthenticationStateProvider AuthenticationStateProvider*@

<EditForm Model="@getDocumentDto">
    <DataAnnotationsValidator />
    <h4>Сведения о документе @Id </h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            Название документа
        </dt>
        <dd class="col-sm-10">
            @getDocumentDto.Title
        </dd>
        <dt class="col-sm-2">
            Отправитель
        </dt>
        <dd class="col-sm-10">
            <a href="UserInformation/@getDocumentDto.SenderId"> @getDocumentDto.SenderInfo </a>
        </dd>
        <dt class="col-sm-2">
            Получатель
        </dt>
        <dd class="col-sm-10">
            <a href="UserInformation/@getDocumentDto.RecieverId"> @getDocumentDto.RecieverInfo </a>
        </dd>
        <dt class="col-sm-2">
            Дата создания
        </dt>
        <dd class="col-sm-10">
            @getDocumentDto.CreateDate
        </dd>
        <dt class="col-sm-2">
            Дата удаления
        </dt>
        <dd class="col-sm-10">
            @getDocumentDto.RemoveDate
        </dd>
        <hr />
        <dt class="col-sm-2">
            Прикрепленный файл
        </dt>
        <dd class="col-sm-10">
            <dl class="row">
                @foreach (var file in getDocumentDto.DocumentFiles)
                {
                    <a href="" @onclick="@(async()=> await FileDownload(file.Name, file.Id))" @onclick:preventDefault> @file.Name</a>
                }
            </dl>
        </dd>
        <hr />
        <dt class="col-sm-2">
            История статусов документа
        </dt>
        <dd class="col-sm-10">
            <dl class="row">
                <Table Hoverable Striped>
                    <TableHeader ThemeContrast="ThemeContrast.Light">
                        <TableRow>
                            <TableHeaderCell>Статус</TableHeaderCell>
                            <TableHeaderCell>Дата</TableHeaderCell>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        @foreach (var status in getDocumentDto.Statuses)
                        {
                            <TableRow>
                                <TableRowCell>@status.Name</TableRowCell>
                                <TableRowCell>@status.Date</TableRowCell>
                            </TableRow>
                        }
                    </TableBody>
                </Table>
            </dl>
        </dd>

        @if (getDocumentDto.SenderId == getUserInfoDto.Id)
        {
            <dt class="col-sm-2">
                Отозвать документ
            </dt>
            <dd class="col-sm-10">
                <Button Color="Color.Danger" Clicked="@RejectClick"> ОТОЗВАТЬ </Button>
            </dd>
        }
        @if (getDocumentDto.RecieverId == getUserInfoDto.Id)
        {
            <dt class="col-sm-2">
                Принять документ
            </dt>
            <dd class="col-sm-10">
                <Button Color="Color.Success" Clicked="@ApproveClick"> ПРИНЯТЬ </Button>
            </dd>
        }
    </dl>
</EditForm>

@code {
    private HubConnection? hubConnection;
    private NotificationMessage? notificationMessage { get; set; }
    private string? jwtToken;
    /// <summary>
    /// СТАТУС УТВЕРЖДЕНИЯ ДОКУМЕНТА
    /// </summary>
    private int ApproveStatusId { get; set; }
    /// <summary>
    /// СТАТУС ОТМЕНЫ ДОКУМЕНТА
    /// </summary>
    private int RejectStatusId { get; set; }
    [Parameter]
    public int Id { get; set; }

    DocumentDto getDocumentDto = new();
    private GetUserInfoDto getUserInfoDto = new();
    ChangeStatusDto changeStatusDto = new();
    protected override async Task OnInitializedAsync()
    {
        try
        {
            getDocumentDto.DocumentFiles = new();
            getDocumentDto.Statuses = new();
            notificationMessage = new();
            jwtToken = await jwtTokenProvider.GetJwtToken();
            hubConnection = new HubConnectionBuilder()
           .WithUrl(NavigationManager.ToAbsoluteUri("/notificationHub"), options =>
           {
               options.AccessTokenProvider = () => Task.FromResult(jwtToken);
           })
           .WithAutomaticReconnect()
           .Build();
            hubConnection.On<string, string>("ReceiveNotification", (header, body) =>
                {
                    notificationMessage.Header = header;
                    notificationMessage.Body = body;
                    StateHasChanged();
                    NotificationService.Success(notificationMessage.Body, notificationMessage.Header);
                    StateHasChanged();
                });
            await hubConnection.StartAsync();
            //Статус - "Выполнено"
            ApproveStatusId = 3;
            //Статус - "Удалено"
            RejectStatusId = 5;
            //var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            //var user = authState.User.Claims.Select(x=>x.Type).ToList();
            getUserInfoDto = await httpClient.GetFromJsonAsync<GetUserInfoDto>("UserInfo");
            getDocumentDto = await httpClient.GetFromJsonAsync<DocumentDto>("Document/GetDocument/" + Id);

       
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task FileDownload(string fileName, int id)
    {
        var fileStream = await httpClient.GetStreamAsync("/FileDownload/" + id);
        using var streamRef = new DotNetStreamReference(stream: fileStream);
        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    private async Task ApproveClick()
    {
        changeStatusDto.JwtToken = jwtToken;
        changeStatusDto.StatusId = ApproveStatusId;
        changeStatusDto.DocumentId = getDocumentDto.Id;
        var httpResponse = await httpClient.PutAsJsonAsync("Status/ChangeStatus", changeStatusDto);
    }
    private async Task RejectClick()
    {
        changeStatusDto.JwtToken = await jwtTokenProvider.GetJwtToken();
        changeStatusDto.StatusId = RejectStatusId;
        changeStatusDto.DocumentId = getDocumentDto.Id;
        var httpResponse = await httpClient.PutAsJsonAsync("Status/ChangeStatus", changeStatusDto);
    }
    public bool IsConnected =>
      hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
