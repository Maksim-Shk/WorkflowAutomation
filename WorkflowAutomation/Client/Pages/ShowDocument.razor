@page "/ShowDocument/{Id:int}"
@using WorkflowAutomation.Application.Documents.Queries.GetOneDocument

@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.ComponentModel.DataAnnotations

@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject HttpClient httpClient

<EditForm Model="@getDocumentDto">
    <DataAnnotationsValidator />
    <h4>Сведения о документе @Id </h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            Название документа
        </dt>
        <dd class="col-sm-10">
            @getDocumentDto.Title
        </dd>
        <dt class="col-sm-2">
            Отправитель
        </dt>
        <dd class="col-sm-10">
            <a href="UserInformation/@getDocumentDto.SenderId"> @getDocumentDto.SenderInfo </a>
        </dd>
        <dt class="col-sm-2">
            Получатель
        </dt>
        <dd class="col-sm-10">
            <a href="UserInformation/@getDocumentDto.RecieverId"> @getDocumentDto.RecieverInfo </a>
        </dd>
        <dt class="col-sm-2">
            Дата создания
        </dt>
        <dd class="col-sm-10">
            @getDocumentDto.CreateDate
        </dd>
        <dt class="col-sm-2">
            Дата удаления
        </dt>
        <dd class="col-sm-10">
            @getDocumentDto.RemoveDate
        </dd>
        <hr/>
        <dt class="col-sm-2">
            Прикрепленный файл
        </dt>
        <dd class="col-sm-10">            
            <dl class="row">
                @foreach (var file in getDocumentDto.DocumentFiles)
                {
                    <a href="" @onclick="@(async()=> await FileDownload(file.Name, file.Id))" @onclick:preventDefault> @file.Name</a>
                }
             </dl>
        </dd>
        <hr/>
        <dt class="col-sm-2">
            История статусов документа
        </dt>
        <dd class="col-sm-10">
            <dl class="row">
               <Table Hoverable Striped>
                   <TableHeader ThemeContrast="ThemeContrast.Light">
                       <TableRow>
                           <TableHeaderCell>Статус</TableHeaderCell>
                           <TableHeaderCell>Дата</TableHeaderCell>
                       </TableRow>
                   </TableHeader>
                   <TableBody>
                        @foreach(var status in getDocumentDto.Statuses)
                        {
                         <TableRow>
                             <TableRowCell>@status.Name</TableRowCell>
                             <TableRowCell>@status.Date</TableRowCell>
                         </TableRow>   
                        }
                    </TableBody>
               </Table>
            </dl>
        </dd>
        </dl>

</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }

    DocumentDto getDocumentDto;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            getDocumentDto = new();
            getDocumentDto.DocumentFiles = new();
            getDocumentDto.Statuses = new();
            getDocumentDto = await httpClient.GetFromJsonAsync<DocumentDto>("Document/GetDocument/" + Id);

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task FileDownload(string fileName, int id)
    {
        var fileStream = await httpClient.GetStreamAsync("/FileDownload/" + id);
        using var streamRef = new DotNetStreamReference(stream: fileStream);
        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }
}
