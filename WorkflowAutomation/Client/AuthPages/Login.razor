@page "/login"

@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient httpClient

@using WorkflowAutomation.Client.Models
@using WorkflowAutomation.Shared.Identity
@using WorkflowAutomation.Client.Services
@using WorkflowAutomation.Application.Users.Queries.GetUserInfo

<h1>¬ход в систему</h1>

@if (ShowErrors)
{
    <div class="alert alert-danger" role="alert">
        <p>@Error</p>
    </div>
}

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Please enter your details</h5>
        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            

            <div class="form-group">
                <label for="email">Email address</label>
                <InputText Id="email" Class="form-control" @bind-Value="loginModel.Email" />
                <ValidationMessage For="@(() => loginModel.Email)" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText Id="password" type="password" Class="form-control" @bind-Value="loginModel.Password" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter]
    protected UserInfo? _currentUserInformation { get; set; }

    private LoginDto loginModel = new LoginDto();

    private bool ShowErrors;
    private string Error = "";

    private async Task HandleLogin()
    {
        ShowErrors = false;

        var result = await AuthService.Login(loginModel);

        if (result.Successful)
        {
            await RefreshUserInfo();
            NavigationManager.NavigateTo("/");
        }
        else
        {
            Error = result.Error;
            ShowErrors = true;
        }
    }

    public async Task RefreshUserInfo()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user?.Identity == null) return;

        if (user.Identity.IsAuthenticated)
        {
            try
            {
                var userInfo = await httpClient.GetFromJsonAsync<GetUserInfoDto>("UserInfo");

                if (userInfo == null) return;

                _currentUserInformation.Name = userInfo.Name;
                _currentUserInformation.Patronomic = userInfo.Patronymic;
                _currentUserInformation.IsInfoFull = true;
            }
            catch { }
        }
    }
}
