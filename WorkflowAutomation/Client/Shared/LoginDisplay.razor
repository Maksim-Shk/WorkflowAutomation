@*@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager

<AuthorizeView>
    <Authorized>
        <a href="authentication/profile">Здравствуйте, @context.User.Identity?.Name!</a>
        <button class="nav-link btn btn-link" @onclick="BeginSignOut">Выйти</button>
    </Authorized>
    <NotAuthorized>
        <a href="authentication/register">Регистрация</a>
        <a href="authentication/login">Вход</a>
    </NotAuthorized>
</AuthorizeView>*@


@using WorkflowAutomation.Application.Users.Queries.GetUserInfo
@inject HttpClient httpClient
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>
    <Authorized>
        @if (getUserInfoDto.Name != null)
        {
            <p> Здравствуйте, @getUserInfoDto.Name! @getUserInfoDto.Patronymic</p>
        }
        else 
        {
            <p> Здравствуйте, @context.User.Identity.Name!</p>
        }
        <a href="LogOut">Выход</a>
    </Authorized>
    <NotAuthorized>
        <a href="Register">Регистрация</a>
        <a href="Login">Вход</a>
    </NotAuthorized>
</AuthorizeView>

@*@code{
    private async Task BeginSignOut(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }
}
*@
@code {
    //private string Username;
    private GetUserInfoDto getUserInfoDto = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            getUserInfoDto = await httpClient.GetFromJsonAsync<GetUserInfoDto>("UserInfo");
        }
    }
}
