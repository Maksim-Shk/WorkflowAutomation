using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Authorization;

using WorkflowAutomation.Server.Models;
using WorkflowAutomation.Shared.Identity;
using System.Data;
using WorkflowAutomation.Application.Statuses.Commands.ChangeStatus;
using WorkflowAutomation.Application.DataGeneration.Commands;

namespace WorkflowAutomation.Server.Controllers
{
    //[Authorize]
    [ApiController]
    [Route("[controller]")]
    public class GenerateDataController : BaseController
    {
        private readonly UserManager<ApplicationUser> _userManager;
        private readonly RoleManager<IdentityRole> _roleManager;

        public GenerateDataController(UserManager<ApplicationUser> userManager, RoleManager<IdentityRole> roleManager)
        {
            _roleManager = roleManager;
            _userManager = userManager;
        }

        [HttpGet("Generate")]
        public async Task<ActionResult> Generate()
        {
            var command = new GenerateDataCommand();
            int usercount = 20;
            int admincount = 2;
           // command.StartStatusDate = DateTime.Now.AddMonths(-3);
            command.EndStatusDate = DateTime.Now.AddDays(-300);
            command.UserCount = usercount;
            command.AdminCount = 2;
            command.DocumentPerUserCount = 5;
            var userNames = new List<string>();

            var allRoles = _roleManager.Roles.ToList();

            for (int i = 1; i <= usercount; i++)
            {
                var username = "AutoGeneratedTestUser" + i + "@mail.ru";
                var email = username;
                var password = username;

              // if (_userManager.FindByNameAsync(username) == null)
              // {
                    var newUser = new ApplicationUser { UserName = username, Email = email };
                    var result = await _userManager.CreateAsync(newUser, password);
                    await _userManager.AddToRoleAsync(newUser, allRoles.FirstOrDefault(r => r.NormalizedName == "«¿–≈√»—“–»–Œ¬¿ÕÕ€… œŒÀ‹«Œ¬¿“≈À‹").Name);
                    userNames.Add(username);
               // }
              //  else userNames.Add(username);
            }

            for (int i = 1; i <= admincount; i++)
            {
                var username = "AutoGeneratedTestAdmin" + i + "@mail.ru";
                var email = username;
                var password = username;

                // if (_userManager.FindByNameAsync(username) == null)
                // {
                var newUser = new ApplicationUser { UserName = username, Email = email };
                var result = await _userManager.CreateAsync(newUser, password);
                await _userManager.AddToRoleAsync(newUser, allRoles.FirstOrDefault(r => r.NormalizedName == "¿ƒÃ»Õ»—“–¿“Œ–").Name);
                userNames.Add(username);
                // }
                //  else userNames.Add(username);
            }


            command.UsersNames = userNames;




            await Mediator.Send(command);
            return NoContent();




            // var allRoles = _roleManager.Roles.ToList();
            //
            // for (int i = 0; i < 2; i++) {
            //     var username = "adminUser" + i + "@mail.ru";
            //     var newUser = new ApplicationUser { UserName = username, Email = username };
            //     var result = await _userManager.CreateAsync(newUser, username);
            //     await _userManager.AddToRoleAsync(newUser, allRoles.FirstOrDefault(r => r.NormalizedName == "¿ƒÃ»Õ»—“–¿“Œ–").Name);
            // }
        }
    }
}