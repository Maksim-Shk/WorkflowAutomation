// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WorkflowAutomation.Persistence;

#nullable disable

namespace WorkflowAutomation.Persistence.Migrations
{
    [DbContext(typeof(DocumentsDbContext))]
    partial class DocumentsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pgcrypto");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("WorkflowAutomation.Domain.AppUser", b =>
                {
                    b.Property<string>("IdUser")
                        .HasColumnType("text")
                        .HasColumnName("id_user");

                    b.Property<DateTime?>("LastOnline")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_online");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("patronymic");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("register_date");

                    b.Property<DateTime?>("RemovalDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removal_date");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("surname");

                    b.HasKey("IdUser")
                        .HasName("app_user_pkey");

                    b.HasIndex(new[] { "IdUser" }, "fki_app_user_asp_id_fkey");

                    b.ToTable("app_user", (string)null);
                });

            modelBuilder.Entity("WorkflowAutomation.Domain.AspNetDeviceCode", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("character varying(50000)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("UserCode");

                    b.HasIndex(new[] { "DeviceCode" }, "IX_DeviceCodes_DeviceCode")
                        .IsUnique();

                    b.HasIndex(new[] { "Expiration" }, "IX_DeviceCodes_Expiration");

                    b.ToTable("AspNetDeviceCode");
                });

            modelBuilder.Entity("WorkflowAutomation.Domain.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique();

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "35e4b4a7-f767-43a9-9fd6-9aca58617027",
                            Name = "Администратор",
                            NormalizedName = "АДМИНИСТРАТОР"
                        },
                        new
                        {
                            Id = "a1bd31a5-01dc-48e9-b65c-5070bd5b0cee",
                            Name = "Зарегистрированный пользователь",
                            NormalizedName = "ЗАРЕГИСТРИРОВАННЫЙ ПОЛЬЗОВАТЕЛЬ"
                        },
                        new
                        {
                            Id = "53669294-44e0-4f22-9516-b3ff5146a70f",
                            Name = "Заблокированный пользователь",
                            NormalizedName = "ЗАБЛОКИРОВАННЫЙ ПОЛЬЗОВАТЕЛЬ"
                        });
                });

            modelBuilder.Entity("WorkflowAutomation.Domain.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("WorkflowAutomation.Domain.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique();

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("WorkflowAutomation.Domain.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("WorkflowAutomation.Domain.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("WorkflowAutomation.Domain.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WorkflowAutomation.Domain.Database.AllowedSubdivision", b =>
                {
                    b.Property<int>("IdSubdivision")
                        .HasColumnType("integer");

                    b.Property<int?>("IdSubordination")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("AllowedSubdivisions");
                });

            modelBuilder.Entity("WorkflowAutomation.Domain.Document", b =>
                {
                    b.Property<int>("IdDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_document");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("IdDocument"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("IdDocumentType")
                        .HasColumnType("integer")
                        .HasColumnName("id_document_type");

                    b.Property<string>("IdReceiver")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("id_receiver");

                    b.Property<string>("IdSender")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("id_sender");

                    b.Property<DateTime?>("RemoveDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("remove_date");

                    b.Property<string>("Title")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_date");

                    b.HasKey("IdDocument")
                        .HasName("document_pkey");

                    b.HasIndex(new[] { "IdSender" }, "IX_document_id_sender");

                    b.HasIndex(new[] { "IdReceiver" }, "fki_document_id_receiver_fkey");

                    b.HasIndex(new[] { "IdDocumentType" }, "fki_rtewte");

                    b.ToTable("document", (string)null);
                });

            modelBuilder.Entity("WorkflowAutomation.Domain.DocumentContent", b =>
                {
                    b.Property<int>("IdDocumentContent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_document_content");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("IdDocumentContent"));

                    b.Property<int>("IdDocument")
                        .HasColumnType("integer")
                        .HasColumnName("id_document");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.HasKey("IdDocumentContent")
                        .HasName("document_content_pkey");

                    b.HasIndex(new[] { "IdDocument" }, "fki_document_content_id_document_fkey");

                    b.ToTable("document_content", (string)null);
                });

            modelBuilder.Entity("WorkflowAutomation.Domain.DocumentStatus", b =>
                {
                    b.Property<int>("IdDocumentStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_document_status");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("IdDocumentStatus"));

                    b.Property<DateTime>("AppropriationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("appropriation_date");

                    b.Property<int>("IdDocument")
                        .HasColumnType("integer")
                        .HasColumnName("id_document");

                    b.Property<int>("IdStatus")
                        .HasColumnType("integer")
                        .HasColumnName("id_status");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("id_user");

                    b.HasKey("IdDocumentStatus")
                        .HasName("document_status_pkey");

                    b.HasIndex(new[] { "IdDocument" }, "IX_document_status_id_document");

                    b.HasIndex(new[] { "IdStatus" }, "IX_document_status_id_status");

                    b.HasIndex(new[] { "IdUser" }, "fki_document_status_id_user_fkey");

                    b.ToTable("document_status", (string)null);
                });

            modelBuilder.Entity("WorkflowAutomation.Domain.DocumentType", b =>
                {
                    b.Property<int>("IdDocumentType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_document_type");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("IdDocumentType"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("ShortName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("short_name");

                    b.HasKey("IdDocumentType")
                        .HasName("document_type_pkey");

                    b.ToTable("document_type", (string)null);

                    b.HasData(
                        new
                        {
                            IdDocumentType = 1,
                            Name = "Служебная записка",
                            ShortName = "СЗ"
                        },
                        new
                        {
                            IdDocumentType = 2,
                            Name = "Приказ",
                            ShortName = "Приказ"
                        });
                });

            modelBuilder.Entity("WorkflowAutomation.Domain.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsX509certificate")
                        .HasColumnType("boolean")
                        .HasColumnName("IsX509Certificate");

                    b.Property<string>("Use")
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Use" }, "IX_Keys_Use");

                    b.ToTable("Keys");
                });

            modelBuilder.Entity("WorkflowAutomation.Domain.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("character varying(50000)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Key");

                    b.HasIndex(new[] { "ConsumedTime" }, "IX_PersistedGrants_ConsumedTime");

                    b.HasIndex(new[] { "Expiration" }, "IX_PersistedGrants_Expiration");

                    b.HasIndex(new[] { "SubjectId", "ClientId", "Type" }, "IX_PersistedGrants_SubjectId_ClientId_Type");

                    b.HasIndex(new[] { "SubjectId", "SessionId", "Type" }, "IX_PersistedGrants_SubjectId_SessionId_Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("WorkflowAutomation.Domain.Position", b =>
                {
                    b.Property<int>("IdPosition")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_position");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("IdPosition"));

                    b.Property<int?>("IdSubordination")
                        .HasColumnType("integer")
                        .HasColumnName("id_subordination");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("ShortName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("short_name");

                    b.HasKey("IdPosition")
                        .HasName("position_pkey");

                    b.HasIndex(new[] { "IdSubordination" }, "fki_position_id_subordination_fkey");

                    b.ToTable("position", (string)null);

                    b.HasData(
                        new
                        {
                            IdPosition = 1,
                            Name = "Заведующий кафедры",
                            ShortName = "зав. каф."
                        },
                        new
                        {
                            IdPosition = 2,
                            IdSubordination = 1,
                            Name = "Старший преподаватель",
                            ShortName = "ст. преподаватель"
                        },
                        new
                        {
                            IdPosition = 3,
                            IdSubordination = 1,
                            Name = "Преподаватель",
                            ShortName = "преподаватель"
                        },
                        new
                        {
                            IdPosition = 4,
                            Name = "Программист",
                            ShortName = "программист"
                        });
                });

            modelBuilder.Entity("WorkflowAutomation.Domain.Status", b =>
                {
                    b.Property<int>("IdStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_status");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("IdStatus"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.HasKey("IdStatus")
                        .HasName("status_pkey");

                    b.ToTable("status", (string)null);

                    b.HasData(
                        new
                        {
                            IdStatus = 1,
                            Name = "Ожидает регистрации"
                        },
                        new
                        {
                            IdStatus = 2,
                            Name = "Зарегистрирован"
                        },
                        new
                        {
                            IdStatus = 3,
                            Name = "Включен в план работ"
                        },
                        new
                        {
                            IdStatus = 4,
                            Name = "В процессе выполнения"
                        },
                        new
                        {
                            IdStatus = 5,
                            Name = "Выполнен"
                        },
                        new
                        {
                            IdStatus = 6,
                            Name = "Удален"
                        });
                });

            modelBuilder.Entity("WorkflowAutomation.Domain.Subdivision", b =>
                {
                    b.Property<int>("IdSubdivision")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_subdivision");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("IdSubdivision"));

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_date");

                    b.Property<int?>("IdSubordination")
                        .HasColumnType("integer")
                        .HasColumnName("id_subordination");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("ShortName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("short_name");

                    b.HasKey("IdSubdivision")
                        .HasName("subdivision_pkey");

                    b.HasIndex(new[] { "IdSubordination" }, "fki_subdivision_id_subordination_fkey");

                    b.ToTable("subdivision", (string)null);

                    b.HasData(
                        new
                        {
                            IdSubdivision = 2,
                            CreationDate = new DateTime(2023, 5, 19, 16, 17, 34, 896, DateTimeKind.Local).AddTicks(8574),
                            IdSubordination = 1,
                            Name = "Первый проректор",
                            ShortName = ""
                        },
                        new
                        {
                            IdSubdivision = 6,
                            CreationDate = new DateTime(2023, 5, 19, 16, 17, 34, 896, DateTimeKind.Local).AddTicks(8584),
                            IdSubordination = 1,
                            Name = "Проректор по общим вопросам",
                            ShortName = ""
                        },
                        new
                        {
                            IdSubdivision = 7,
                            CreationDate = new DateTime(2023, 5, 19, 16, 17, 34, 896, DateTimeKind.Local).AddTicks(8586),
                            IdSubordination = 6,
                            Name = "Научная библиотека",
                            ShortName = ""
                        },
                        new
                        {
                            IdSubdivision = 9,
                            CreationDate = new DateTime(2023, 5, 19, 16, 17, 34, 896, DateTimeKind.Local).AddTicks(8587),
                            IdSubordination = 7,
                            Name = "Отдел информационно-библиотечного обслуживания",
                            ShortName = ""
                        },
                        new
                        {
                            IdSubdivision = 10,
                            CreationDate = new DateTime(2023, 5, 19, 16, 17, 34, 896, DateTimeKind.Local).AddTicks(8589),
                            IdSubordination = 9,
                            Name = "Сектор регистрации пользователей и сервисных услуг",
                            ShortName = ""
                        },
                        new
                        {
                            IdSubdivision = 11,
                            CreationDate = new DateTime(2023, 5, 19, 16, 17, 34, 896, DateTimeKind.Local).AddTicks(8590),
                            IdSubordination = 8,
                            Name = "Отдел ремонта и обслуживания информационно-вычислительной техники",
                            ShortName = ""
                        },
                        new
                        {
                            IdSubdivision = 12,
                            CreationDate = new DateTime(2023, 5, 19, 16, 17, 34, 896, DateTimeKind.Local).AddTicks(8592),
                            IdSubordination = 8,
                            Name = "Отдел информационных систем",
                            ShortName = ""
                        },
                        new
                        {
                            IdSubdivision = 13,
                            CreationDate = new DateTime(2023, 5, 19, 16, 17, 34, 896, DateTimeKind.Local).AddTicks(8593),
                            IdSubordination = 8,
                            Name = "Отдел цифровых образовательных платформ",
                            ShortName = ""
                        },
                        new
                        {
                            IdSubdivision = 14,
                            CreationDate = new DateTime(2023, 5, 19, 16, 17, 34, 896, DateTimeKind.Local).AddTicks(8595),
                            IdSubordination = 8,
                            Name = "Отдел телекоммуникаций",
                            ShortName = ""
                        },
                        new
                        {
                            IdSubdivision = 15,
                            CreationDate = new DateTime(2023, 5, 19, 16, 17, 34, 896, DateTimeKind.Local).AddTicks(8596),
                            IdSubordination = 8,
                            Name = "Отдел информационной безопасности",
                            ShortName = ""
                        },
                        new
                        {
                            IdSubdivision = 16,
                            CreationDate = new DateTime(2023, 5, 19, 16, 17, 34, 896, DateTimeKind.Local).AddTicks(8598),
                            IdSubordination = 14,
                            Name = "Сектор телекоммуникационных сетей и интернет",
                            ShortName = ""
                        },
                        new
                        {
                            IdSubdivision = 17,
                            CreationDate = new DateTime(2023, 5, 19, 16, 17, 34, 896, DateTimeKind.Local).AddTicks(8600),
                            IdSubordination = 14,
                            Name = "Сектор телефонии и охранной сигнализации",
                            ShortName = ""
                        },
                        new
                        {
                            IdSubdivision = 18,
                            CreationDate = new DateTime(2023, 5, 19, 16, 17, 34, 896, DateTimeKind.Local).AddTicks(8601),
                            IdSubordination = 17,
                            Name = "Комиссия по обучению безопасным приемам работы и проверки знаний требований охраны труда работников отдела",
                            ShortName = ""
                        },
                        new
                        {
                            IdSubdivision = 19,
                            CreationDate = new DateTime(2023, 5, 19, 16, 17, 34, 896, DateTimeKind.Local).AddTicks(8603),
                            IdSubordination = 13,
                            Name = "Сектор поддержки мультимедийных комплексов",
                            ShortName = ""
                        },
                        new
                        {
                            IdSubdivision = 20,
                            CreationDate = new DateTime(2023, 5, 19, 16, 17, 34, 896, DateTimeKind.Local).AddTicks(8604),
                            IdSubordination = 13,
                            Name = "Сектор программно-технической поддержки цифровых образовательных платформ",
                            ShortName = ""
                        },
                        new
                        {
                            IdSubdivision = 21,
                            CreationDate = new DateTime(2023, 5, 19, 16, 17, 34, 896, DateTimeKind.Local).AddTicks(8606),
                            IdSubordination = 13,
                            Name = "Сектор сопровождения цифровых образовательных ресурсов",
                            ShortName = ""
                        },
                        new
                        {
                            IdSubdivision = 22,
                            CreationDate = new DateTime(2023, 5, 19, 16, 17, 34, 896, DateTimeKind.Local).AddTicks(8608),
                            IdSubordination = 12,
                            Name = "Сектор автоматизированной поддержки организации учебного процесса",
                            ShortName = ""
                        },
                        new
                        {
                            IdSubdivision = 23,
                            CreationDate = new DateTime(2023, 5, 19, 16, 17, 34, 896, DateTimeKind.Local).AddTicks(8609),
                            IdSubordination = 12,
                            Name = "Сектор сопровождения программных систем",
                            ShortName = ""
                        },
                        new
                        {
                            IdSubdivision = 24,
                            CreationDate = new DateTime(2023, 5, 19, 16, 17, 34, 896, DateTimeKind.Local).AddTicks(8611),
                            IdSubordination = 12,
                            Name = "Сектор систем баз данных",
                            ShortName = ""
                        },
                        new
                        {
                            IdSubdivision = 25,
                            CreationDate = new DateTime(2023, 5, 19, 16, 17, 34, 896, DateTimeKind.Local).AddTicks(8638),
                            IdSubordination = 12,
                            Name = "Сектор разработки и сопровождения сайтов",
                            ShortName = ""
                        },
                        new
                        {
                            IdSubdivision = 33,
                            CreationDate = new DateTime(2023, 5, 19, 16, 17, 34, 896, DateTimeKind.Local).AddTicks(8639),
                            IdSubordination = 26,
                            Name = "Учебно-научная лаборатория \"Компьютерное моделирование\"",
                            ShortName = ""
                        },
                        new
                        {
                            IdSubdivision = 34,
                            CreationDate = new DateTime(2023, 5, 19, 16, 17, 34, 896, DateTimeKind.Local).AddTicks(8641),
                            IdSubordination = 28,
                            Name = "Филиал кафедры прикладной математики",
                            ShortName = ""
                        },
                        new
                        {
                            IdSubdivision = 32,
                            CreationDate = new DateTime(2023, 5, 19, 16, 17, 34, 896, DateTimeKind.Local).AddTicks(8643),
                            IdSubordination = 26,
                            Name = "Филиал кафедры ПОВТАС",
                            ShortName = ""
                        },
                        new
                        {
                            IdSubdivision = 1,
                            CreationDate = new DateTime(2023, 5, 19, 16, 17, 34, 896, DateTimeKind.Local).AddTicks(8644),
                            Name = "Ученый совет",
                            ShortName = ""
                        },
                        new
                        {
                            IdSubdivision = 3,
                            CreationDate = new DateTime(2023, 5, 19, 16, 17, 34, 896, DateTimeKind.Local).AddTicks(8646),
                            IdSubordination = 2,
                            Name = "Аэрокосмический институт",
                            ShortName = "АКИ"
                        },
                        new
                        {
                            IdSubdivision = 4,
                            CreationDate = new DateTime(2023, 5, 19, 16, 17, 34, 896, DateTimeKind.Local).AddTicks(8647),
                            IdSubordination = 2,
                            Name = "Институт менеджмента",
                            ShortName = "ИМ"
                        },
                        new
                        {
                            IdSubdivision = 5,
                            CreationDate = new DateTime(2023, 5, 19, 16, 17, 34, 896, DateTimeKind.Local).AddTicks(8649),
                            IdSubordination = 2,
                            Name = "Факультет математики и информационных технологий",
                            ShortName = "ФМИТ"
                        },
                        new
                        {
                            IdSubdivision = 8,
                            CreationDate = new DateTime(2023, 5, 19, 16, 17, 34, 896, DateTimeKind.Local).AddTicks(8651),
                            IdSubordination = 6,
                            Name = "Центр информационных технологий",
                            ShortName = "ЦИТ"
                        },
                        new
                        {
                            IdSubdivision = 26,
                            CreationDate = new DateTime(2023, 5, 19, 16, 17, 34, 896, DateTimeKind.Local).AddTicks(8652),
                            IdSubordination = 5,
                            Name = "Кафедра программного обеспечения вычислительной техники и автоматизированных систем",
                            ShortName = "кафедра ПОВТАС"
                        },
                        new
                        {
                            IdSubdivision = 27,
                            CreationDate = new DateTime(2023, 5, 19, 16, 17, 34, 896, DateTimeKind.Local).AddTicks(8654),
                            IdSubordination = 5,
                            Name = "Кафедра информатики",
                            ShortName = ""
                        },
                        new
                        {
                            IdSubdivision = 28,
                            CreationDate = new DateTime(2023, 5, 19, 16, 17, 34, 896, DateTimeKind.Local).AddTicks(8655),
                            IdSubordination = 5,
                            Name = "Кафедра прикладной математики",
                            ShortName = "кафедра ПМат"
                        },
                        new
                        {
                            IdSubdivision = 29,
                            CreationDate = new DateTime(2023, 5, 19, 16, 17, 34, 896, DateTimeKind.Local).AddTicks(8657),
                            IdSubordination = 5,
                            Name = "Кафедра вычислительной техники и защиты информации",
                            ShortName = "кафедра ВТиЗИ"
                        },
                        new
                        {
                            IdSubdivision = 30,
                            CreationDate = new DateTime(2023, 5, 19, 16, 17, 34, 896, DateTimeKind.Local).AddTicks(8658),
                            IdSubordination = 5,
                            Name = "Кафедра геометрии и компьютерных наук",
                            ShortName = "кафедра ГКН"
                        },
                        new
                        {
                            IdSubdivision = 31,
                            CreationDate = new DateTime(2023, 5, 19, 16, 17, 34, 896, DateTimeKind.Local).AddTicks(8660),
                            IdSubordination = 5,
                            Name = "Кафедра компьютерной безопасности и математического обеспечения информационных систем",
                            ShortName = "кафедра КБМОИС"
                        });
                });

            modelBuilder.Entity("WorkflowAutomation.Domain.UserPosition", b =>
                {
                    b.Property<int>("IdUserPosition")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_user_position");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("IdUserPosition"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("appointment_date");

                    b.Property<int>("IdPosition")
                        .HasColumnType("integer")
                        .HasColumnName("id_position");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("id_user");

                    b.Property<DateTime?>("RemovalDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removal_date");

                    b.HasKey("IdUserPosition")
                        .HasName("user_position_pkey");

                    b.HasIndex(new[] { "IdPosition" }, "fki_user_position_id_position_fkey");

                    b.HasIndex(new[] { "IdUser" }, "fki_user_position_id_user_fkey");

                    b.ToTable("user_position", (string)null);
                });

            modelBuilder.Entity("WorkflowAutomation.Domain.UserSubdivision", b =>
                {
                    b.Property<int>("IdUserSubdivision")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_user_subdivision");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("IdUserSubdivision"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("appointment_date");

                    b.Property<int>("IdSubdivision")
                        .HasColumnType("integer")
                        .HasColumnName("id_subdivision");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("id_user");

                    b.Property<DateTime?>("RemovalDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removal_date");

                    b.HasKey("IdUserSubdivision")
                        .HasName("user_subdivision_pkey");

                    b.HasIndex(new[] { "IdSubdivision" }, "fki_user_subdivision_id_subdivision_fkey");

                    b.HasIndex(new[] { "IdUser" }, "fki_user_subdivision_id_user_fkey");

                    b.ToTable("user_subdivision", (string)null);
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("WorkflowAutomation.Domain.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkflowAutomation.Domain.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorkflowAutomation.Domain.AppUser", b =>
                {
                    b.HasOne("WorkflowAutomation.Domain.AspNetUser", "IdUserNavigation")
                        .WithOne("AppUser")
                        .HasForeignKey("WorkflowAutomation.Domain.AppUser", "IdUser")
                        .IsRequired()
                        .HasConstraintName("app_user_asp_id_fkey");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("WorkflowAutomation.Domain.AspNetRoleClaim", b =>
                {
                    b.HasOne("WorkflowAutomation.Domain.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WorkflowAutomation.Domain.AspNetUserClaim", b =>
                {
                    b.HasOne("WorkflowAutomation.Domain.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkflowAutomation.Domain.AspNetUserLogin", b =>
                {
                    b.HasOne("WorkflowAutomation.Domain.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkflowAutomation.Domain.AspNetUserToken", b =>
                {
                    b.HasOne("WorkflowAutomation.Domain.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkflowAutomation.Domain.Document", b =>
                {
                    b.HasOne("WorkflowAutomation.Domain.DocumentType", "IdDocumentTypeNavigation")
                        .WithMany("Documents")
                        .HasForeignKey("IdDocumentType")
                        .IsRequired()
                        .HasConstraintName("document_id_document_type_fkey");

                    b.HasOne("WorkflowAutomation.Domain.AppUser", "IdReceiverNavigation")
                        .WithMany("DocumentIdReceiverNavigations")
                        .HasForeignKey("IdReceiver")
                        .IsRequired()
                        .HasConstraintName("document_id_receiver_fkey");

                    b.HasOne("WorkflowAutomation.Domain.AppUser", "IdSenderNavigation")
                        .WithMany("DocumentIdSenderNavigations")
                        .HasForeignKey("IdSender")
                        .IsRequired()
                        .HasConstraintName("document_id_sender_fkey");

                    b.Navigation("IdDocumentTypeNavigation");

                    b.Navigation("IdReceiverNavigation");

                    b.Navigation("IdSenderNavigation");
                });

            modelBuilder.Entity("WorkflowAutomation.Domain.DocumentContent", b =>
                {
                    b.HasOne("WorkflowAutomation.Domain.Document", "IdDocumentNavigation")
                        .WithMany("DocumentContents")
                        .HasForeignKey("IdDocument")
                        .IsRequired()
                        .HasConstraintName("document_content_id_document_fkey");

                    b.Navigation("IdDocumentNavigation");
                });

            modelBuilder.Entity("WorkflowAutomation.Domain.DocumentStatus", b =>
                {
                    b.HasOne("WorkflowAutomation.Domain.Document", "IdDocumentNavigation")
                        .WithMany("DocumentStatuses")
                        .HasForeignKey("IdDocument")
                        .IsRequired()
                        .HasConstraintName("document_status_id_document_fkey");

                    b.HasOne("WorkflowAutomation.Domain.Status", "IdStatusNavigation")
                        .WithMany("DocumentStatuses")
                        .HasForeignKey("IdStatus")
                        .IsRequired()
                        .HasConstraintName("document_status_id_status_fkey");

                    b.HasOne("WorkflowAutomation.Domain.AppUser", "IdUserNavigation")
                        .WithMany("DocumentStatuses")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("document_status_id_user_fkey");

                    b.Navigation("IdDocumentNavigation");

                    b.Navigation("IdStatusNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("WorkflowAutomation.Domain.Position", b =>
                {
                    b.HasOne("WorkflowAutomation.Domain.Position", "IdSubordinationNavigation")
                        .WithMany("InverseIdSubordinationNavigation")
                        .HasForeignKey("IdSubordination")
                        .HasConstraintName("position_id_subordination_fkey");

                    b.Navigation("IdSubordinationNavigation");
                });

            modelBuilder.Entity("WorkflowAutomation.Domain.Subdivision", b =>
                {
                    b.HasOne("WorkflowAutomation.Domain.Subdivision", "IdSubordinationNavigation")
                        .WithMany("InverseIdSubordinationNavigation")
                        .HasForeignKey("IdSubordination")
                        .HasConstraintName("subdivision_id_subordination_fkey");

                    b.Navigation("IdSubordinationNavigation");
                });

            modelBuilder.Entity("WorkflowAutomation.Domain.UserPosition", b =>
                {
                    b.HasOne("WorkflowAutomation.Domain.Position", "IdPositionNavigation")
                        .WithMany("UserPositions")
                        .HasForeignKey("IdPosition")
                        .IsRequired()
                        .HasConstraintName("user_position_id_position_fkey");

                    b.HasOne("WorkflowAutomation.Domain.AppUser", "IdUserNavigation")
                        .WithMany("UserPositions")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("user_position_id_user_fkey");

                    b.Navigation("IdPositionNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("WorkflowAutomation.Domain.UserSubdivision", b =>
                {
                    b.HasOne("WorkflowAutomation.Domain.Subdivision", "IdSubdivisionNavigation")
                        .WithMany("UserSubdivisions")
                        .HasForeignKey("IdSubdivision")
                        .IsRequired()
                        .HasConstraintName("user_subdivision_id_subdivision_fkey");

                    b.HasOne("WorkflowAutomation.Domain.AppUser", "IdUserNavigation")
                        .WithMany("UserSubdivisions")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("user_subdivision_id_user_fkey");

                    b.Navigation("IdSubdivisionNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("WorkflowAutomation.Domain.AppUser", b =>
                {
                    b.Navigation("DocumentIdReceiverNavigations");

                    b.Navigation("DocumentIdSenderNavigations");

                    b.Navigation("DocumentStatuses");

                    b.Navigation("UserPositions");

                    b.Navigation("UserSubdivisions");
                });

            modelBuilder.Entity("WorkflowAutomation.Domain.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("WorkflowAutomation.Domain.AspNetUser", b =>
                {
                    b.Navigation("AppUser");

                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserTokens");
                });

            modelBuilder.Entity("WorkflowAutomation.Domain.Document", b =>
                {
                    b.Navigation("DocumentContents");

                    b.Navigation("DocumentStatuses");
                });

            modelBuilder.Entity("WorkflowAutomation.Domain.DocumentType", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("WorkflowAutomation.Domain.Position", b =>
                {
                    b.Navigation("InverseIdSubordinationNavigation");

                    b.Navigation("UserPositions");
                });

            modelBuilder.Entity("WorkflowAutomation.Domain.Status", b =>
                {
                    b.Navigation("DocumentStatuses");
                });

            modelBuilder.Entity("WorkflowAutomation.Domain.Subdivision", b =>
                {
                    b.Navigation("InverseIdSubordinationNavigation");

                    b.Navigation("UserSubdivisions");
                });
#pragma warning restore 612, 618
        }
    }
}
